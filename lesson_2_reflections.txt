What happens when you initialize a repository? Why do you need to do it?

On initialization Git creates hidden directory to store information about repository, commits etc.
Git create a kind of its own infrastructure environment for further work.
It is needed because without it there will be no any specific information,
that allows Git to recognize repository.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

Staging area is like buffer between working area and repository.
It allows you to combine some of changes you've made into logical units to be committed separately.


How can you use the staging area to make sure you have one commit per logical change?

You put selected files to the staging area
and in this isolated view you can clearly see if they logically relate to each other or not.
Unfortunately, it seems like staging area by itself can't help you with this
if you've made few logically separated fixes in a single file.


What are some situations when branches would be helpful in keeping your history organized?
How would branches help?

Branches are useful for developing and testing new features (like extra language or some new function)
or making fundamental refactoring process without affect on main stable version.
Branches isolate those changes and keep stable product clean from bugs until they are ready to be merged.


How do the diagrams help you visualize the branch structure?

Diagrams not only show all branches we have,
diagrams allow us to see relations between branches and commits within them.


What is the result of merging two branches together?
Why do we represent it in the diagram the way we do?

Merge creates a new commit that have two parents commits in two different branches.